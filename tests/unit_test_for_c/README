Unit test for the NCEP IPOLATES2 library (IP2LIB) gdswzd
'c' language wrapper.

HOW THE TEST WORKS:
-------------------

The test is a 'c' program that calls the gdswzd
routine for a rotated lat/lon "B" grid.  The number of
valid grid points and the corner point lat/lons are 
printed to standard output (along with the expected values).

The gdswzd 'c' wrapper was created because gdswzd was
converted to a Fortran module, which cannot be called
directly from 'c'.


DIRECTORY LAYOUT:
-----------------

./sorc - Contains the unit test source code and the build script.
         There is one program for each precision version of the
         library - "4" single "8" double; "d" mixed.

./scripts - Contains scripts to run the test.

./exec - Contains the executables after program build - one
         for each precsion version of ip2lib.

./lib  - Contains links to the ip2lib library and include files.


HOW TO RUN THE TEST:
--------------------

1) Build the IPOLATES2 library.  Go to $root and read the
README.build file for details.

2) Ensure the ./lib directory contains (or links to) the IPOLATES2 libraries and
its module files.  The ./lib directory already contains links that point to the
libraries and module files as they would exist when using the "nco" install
option from step (1).  I.e:

 module file directories:
   incmod_4 -> $root/ip2/vX.Y.Z/include/ip2_vX.Y.Z_4  (single precision)
   incmod_d -> $root/ip2/vX.Y.Z/include/ip2_vX.Y.Z_d  (mixed precision)
   incmod_8 -> $root/ip2/vX.Y.Z/include/ip2_vX.Y.Z_8  (double precistion)

 libraries:
   libip2_4.a -> $root/ip2/vX.Y.Z/libip2_vX.Y.Z_4.a   (single precision)
   libip2_d.a -> $root/ip2/vX.Y.Z/libip2_vX.Y.Z_d.a   (mixed precision)
   libip2_8.a -> $root/ip2/vX.Y.Z/libip2_vX.Y.Z_8.a   (double precistion)

So if that is how IPOLATES2 was built in step (1), there is
nothing more to do. 

However, if you want to build with another version of the library,
or if you built them in step (1) using the "gnu" or "nco_cray" install option,
you will need to adjust these links. 

3) Build the programs

The programs are built with the "make_unit_test.ksh" script in
the ./scripts directory.  On WCOSS and Theia, the script
loads the proper compiler modules and locates the required
NCEP SP libraries.  By default, the program is built with the
Intel compiler.

So to build with the Intel compiler on WCOSS Phase 1/2/3, WCOSS-Cray
and Theia, you would do:

 $ make_unit_test.ksh

To build with the Gnu compiler on Phase 1/2 or Theia, you would do:

 $ export compiler=gnu  (if your environment is bash)
 $ make_unit_test.ksh

To build with the Cray compiler on WCOSS-Cray, you would do:

 $ export compiler=cray
 $ make_unit_test.ksh

To build on other machines you will need to:

   - Locate or build the NCEP SP library.  Then set these
     environment variables on the command line or by editing
     the script:

        SP_LIB4=$path/libsp_4.a (single precsion sp library)
        SP_LIBd=$path/libsp_d.a (mixed precsion sp library)
        SP_LIB8=$path/libsp_8.a (double precsion sp library)

   - Set the 'c' compiler (CCOMP env variable), compiler flags
     (CFLAGS env variable) and any required runtime libraries
     (LIBS env variable).

   - Invoke the "make_unit_test.ksh" script.

4) Run the unit test.  Go to ./scripts.  To run interactively, type:

 $ run_unit_test.ksh

You may want to pipe the output to a log fle. 

To run "run_unit_test.ksh" on the WCOSS or Theia compute nodes,
invoke these driver scripts as follows:

 $ cat run_wcoss.lsf | bsub      (WCOSS Phase 1/2)
 $ cat run_wcoss-cray.lsf | bsub (WCOSS-Cray)
 $ run_wcoss-dell.sh             (WCOSS-Phase 3-Dell)
 $ sbatch run_theia.ksh          (Theia)

In this case, output is sent to "unit_test.log".

QUESTIONS:
----------

Contact: george.gayno@noaa.gov
